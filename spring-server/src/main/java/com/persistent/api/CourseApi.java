/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.persistent.api;

import com.persistent.model.Course;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;
import com.persistent.util.Constants;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-22T15:31:36.117Z[UTC]")
@Validated
@Tag(name = "course", description = "Operations about course")
public interface CourseApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /course : Add a new course
     * Add a new course
     *
     * @param course Create a new course (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addCourse",
        summary = "Add a new course",
        description = "Add a new course",
        tags = { "course" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Course.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Course.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/course",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<Course> addCourse(
        @Parameter(name = "Course", description = "Create a new course", required = true) @Valid @RequestBody Course course
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 1, \"desc\" : \"desc\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<course> <id>1</id> <name>aeiou</name> <desc>aeiou</desc> </course>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * DELETE /course/{courseId} : Deletes a course
     * delete a course
     *
     * @param courseId Course id to delete (required)
     * @return successful operation (status code 200)
     *         or Invalid course value (status code 400)
     */
    @Operation(
        operationId = "deleteCourse",
        summary = "Deletes a course",
        description = "delete a course",
        tags = { "course" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Course.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Course.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid course value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/course/{courseId}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<Course> deleteCourse(
        @Parameter(name = "courseId", description = "Course id to delete", required = true, in = ParameterIn.PATH) @PathVariable("courseId") Long courseId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 1, \"desc\" : \"desc\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<course> <id>1</id> <name>aeiou</name> <desc>aeiou</desc> </course>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /course/{courseId} : Find course by ID
     * Returns a single course
     *
     * @param courseId ID of course to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Course not found (status code 404)
     */
    @Operation(
        operationId = "getCourse",
        summary = "Find course by ID",
        description = "Returns a single course",
        tags = { "course" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Course.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Course.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Course not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/course/{courseId}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<Course> getCourse(
        @Parameter(name = "courseId", description = "ID of course to return", required = true, in = ParameterIn.PATH) @PathVariable("courseId") Long courseId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 1, \"desc\" : \"desc\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<course> <id>1</id> <name>aeiou</name> <desc>aeiou</desc> </course>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /course : Get list of all courses
     * Returns list of courses
     *
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Course not found (status code 404)
     */
    @Operation(
        operationId = "getCourseList",
        summary = "Get list of all courses",
        description = "Returns list of courses",
        tags = { "course" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Course.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Course.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Course not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/course",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<Course>> getCourseList(
        @RequestParam(value = "query_string", defaultValue = Constants.DEFAULT_SEARCH_CRITERIA, required = false) String queryString,
        @RequestParam(value = "pageNumber", defaultValue = Constants.DEFAULT_PAGE_NUMBER, required = false) Integer pageNumber,
        @RequestParam(value = "pageSize", defaultValue = Constants.DEFAULT_PAGE_SIZE, required = false) Integer pageSize,
        @RequestParam(value = "sortBy", defaultValue = Constants.DEFAULT_SORT_BY, required = false) String sortBy,
        @RequestParam(value = "sortDir", defaultValue = Constants.DEFAULT_SORT_DIR, required = false) String sortDir
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : 1, \"desc\" : \"desc\" }, { \"name\" : \"name\", \"id\" : 1, \"desc\" : \"desc\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<course> <id>1</id> <name>aeiou</name> <desc>aeiou</desc> </course>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /course : Update an existing course
     * Update an existing course by Id
     *
     * @param course Update an existent course (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Course not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateCourse",
        summary = "Update an existing course",
        description = "Update an existing course by Id",
        tags = { "course" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Course.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Course.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Course not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/course",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<Course> updateCourse(
        @Parameter(name = "Course", description = "Update an existent course", required = true) @Valid @RequestBody Course course
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 1, \"desc\" : \"desc\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<course> <id>1</id> <name>aeiou</name> <desc>aeiou</desc> </course>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }
}
